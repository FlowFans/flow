// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package state_streamer

import (
	context "context"
	entities "github.com/onflow/flow/protobuf/go/flow/entities"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StateStreamerClient is the client API for StateStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateStreamerClient interface {
	GetBlocks(ctx context.Context, in *BlockSubscription, opts ...grpc.CallOption) (StateStreamer_GetBlocksClient, error)
	GetExecutionData(ctx context.Context, in *ExecutionDataSubscription, opts ...grpc.CallOption) (StateStreamer_GetExecutionDataClient, error)
}

type stateStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewStateStreamerClient(cc grpc.ClientConnInterface) StateStreamerClient {
	return &stateStreamerClient{cc}
}

func (c *stateStreamerClient) GetBlocks(ctx context.Context, in *BlockSubscription, opts ...grpc.CallOption) (StateStreamer_GetBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateStreamer_ServiceDesc.Streams[0], "/flow.state_streamer.StateStreamer/GetBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateStreamerGetBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateStreamer_GetBlocksClient interface {
	Recv() (*entities.Block, error)
	grpc.ClientStream
}

type stateStreamerGetBlocksClient struct {
	grpc.ClientStream
}

func (x *stateStreamerGetBlocksClient) Recv() (*entities.Block, error) {
	m := new(entities.Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateStreamerClient) GetExecutionData(ctx context.Context, in *ExecutionDataSubscription, opts ...grpc.CallOption) (StateStreamer_GetExecutionDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateStreamer_ServiceDesc.Streams[1], "/flow.state_streamer.StateStreamer/GetExecutionData", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateStreamerGetExecutionDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateStreamer_GetExecutionDataClient interface {
	Recv() (*entities.ExecutionData, error)
	grpc.ClientStream
}

type stateStreamerGetExecutionDataClient struct {
	grpc.ClientStream
}

func (x *stateStreamerGetExecutionDataClient) Recv() (*entities.ExecutionData, error) {
	m := new(entities.ExecutionData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateStreamerServer is the server API for StateStreamer service.
// All implementations should embed UnimplementedStateStreamerServer
// for forward compatibility
type StateStreamerServer interface {
	GetBlocks(*BlockSubscription, StateStreamer_GetBlocksServer) error
	GetExecutionData(*ExecutionDataSubscription, StateStreamer_GetExecutionDataServer) error
}

// UnimplementedStateStreamerServer should be embedded to have forward compatible implementations.
type UnimplementedStateStreamerServer struct {
}

func (UnimplementedStateStreamerServer) GetBlocks(*BlockSubscription, StateStreamer_GetBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedStateStreamerServer) GetExecutionData(*ExecutionDataSubscription, StateStreamer_GetExecutionDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetExecutionData not implemented")
}

// UnsafeStateStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateStreamerServer will
// result in compilation errors.
type UnsafeStateStreamerServer interface {
	mustEmbedUnimplementedStateStreamerServer()
}

func RegisterStateStreamerServer(s grpc.ServiceRegistrar, srv StateStreamerServer) {
	s.RegisterService(&StateStreamer_ServiceDesc, srv)
}

func _StateStreamer_GetBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateStreamerServer).GetBlocks(m, &stateStreamerGetBlocksServer{stream})
}

type StateStreamer_GetBlocksServer interface {
	Send(*entities.Block) error
	grpc.ServerStream
}

type stateStreamerGetBlocksServer struct {
	grpc.ServerStream
}

func (x *stateStreamerGetBlocksServer) Send(m *entities.Block) error {
	return x.ServerStream.SendMsg(m)
}

func _StateStreamer_GetExecutionData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutionDataSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateStreamerServer).GetExecutionData(m, &stateStreamerGetExecutionDataServer{stream})
}

type StateStreamer_GetExecutionDataServer interface {
	Send(*entities.ExecutionData) error
	grpc.ServerStream
}

type stateStreamerGetExecutionDataServer struct {
	grpc.ServerStream
}

func (x *stateStreamerGetExecutionDataServer) Send(m *entities.ExecutionData) error {
	return x.ServerStream.SendMsg(m)
}

// StateStreamer_ServiceDesc is the grpc.ServiceDesc for StateStreamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateStreamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flow.state_streamer.StateStreamer",
	HandlerType: (*StateStreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlocks",
			Handler:       _StateStreamer_GetBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetExecutionData",
			Handler:       _StateStreamer_GetExecutionData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flow/state_streamer/state_streamer.proto",
}
