// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package state_streamer

import (
	context "context"
	entities "github.com/onflow/flow/protobuf/go/flow/entities"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StateStreamerAPIClient is the client API for StateStreamerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateStreamerAPIClient interface {
	GetBlocks(ctx context.Context, in *BlockSubscription, opts ...grpc.CallOption) (StateStreamerAPI_GetBlocksClient, error)
	GetExecutionData(ctx context.Context, in *ExecutionDataSubscription, opts ...grpc.CallOption) (StateStreamerAPI_GetExecutionDataClient, error)
}

type stateStreamerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewStateStreamerAPIClient(cc grpc.ClientConnInterface) StateStreamerAPIClient {
	return &stateStreamerAPIClient{cc}
}

func (c *stateStreamerAPIClient) GetBlocks(ctx context.Context, in *BlockSubscription, opts ...grpc.CallOption) (StateStreamerAPI_GetBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateStreamerAPI_ServiceDesc.Streams[0], "/flow.state_streamer.StateStreamerAPI/GetBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateStreamerAPIGetBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateStreamerAPI_GetBlocksClient interface {
	Recv() (*entities.Block, error)
	grpc.ClientStream
}

type stateStreamerAPIGetBlocksClient struct {
	grpc.ClientStream
}

func (x *stateStreamerAPIGetBlocksClient) Recv() (*entities.Block, error) {
	m := new(entities.Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateStreamerAPIClient) GetExecutionData(ctx context.Context, in *ExecutionDataSubscription, opts ...grpc.CallOption) (StateStreamerAPI_GetExecutionDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateStreamerAPI_ServiceDesc.Streams[1], "/flow.state_streamer.StateStreamerAPI/GetExecutionData", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateStreamerAPIGetExecutionDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateStreamerAPI_GetExecutionDataClient interface {
	Recv() (*entities.ExecutionData, error)
	grpc.ClientStream
}

type stateStreamerAPIGetExecutionDataClient struct {
	grpc.ClientStream
}

func (x *stateStreamerAPIGetExecutionDataClient) Recv() (*entities.ExecutionData, error) {
	m := new(entities.ExecutionData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateStreamerAPIServer is the server API for StateStreamerAPI service.
// All implementations should embed UnimplementedStateStreamerAPIServer
// for forward compatibility
type StateStreamerAPIServer interface {
	GetBlocks(*BlockSubscription, StateStreamerAPI_GetBlocksServer) error
	GetExecutionData(*ExecutionDataSubscription, StateStreamerAPI_GetExecutionDataServer) error
}

// UnimplementedStateStreamerAPIServer should be embedded to have forward compatible implementations.
type UnimplementedStateStreamerAPIServer struct {
}

func (UnimplementedStateStreamerAPIServer) GetBlocks(*BlockSubscription, StateStreamerAPI_GetBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedStateStreamerAPIServer) GetExecutionData(*ExecutionDataSubscription, StateStreamerAPI_GetExecutionDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetExecutionData not implemented")
}

// UnsafeStateStreamerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateStreamerAPIServer will
// result in compilation errors.
type UnsafeStateStreamerAPIServer interface {
	mustEmbedUnimplementedStateStreamerAPIServer()
}

func RegisterStateStreamerAPIServer(s grpc.ServiceRegistrar, srv StateStreamerAPIServer) {
	s.RegisterService(&StateStreamerAPI_ServiceDesc, srv)
}

func _StateStreamerAPI_GetBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateStreamerAPIServer).GetBlocks(m, &stateStreamerAPIGetBlocksServer{stream})
}

type StateStreamerAPI_GetBlocksServer interface {
	Send(*entities.Block) error
	grpc.ServerStream
}

type stateStreamerAPIGetBlocksServer struct {
	grpc.ServerStream
}

func (x *stateStreamerAPIGetBlocksServer) Send(m *entities.Block) error {
	return x.ServerStream.SendMsg(m)
}

func _StateStreamerAPI_GetExecutionData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutionDataSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateStreamerAPIServer).GetExecutionData(m, &stateStreamerAPIGetExecutionDataServer{stream})
}

type StateStreamerAPI_GetExecutionDataServer interface {
	Send(*entities.ExecutionData) error
	grpc.ServerStream
}

type stateStreamerAPIGetExecutionDataServer struct {
	grpc.ServerStream
}

func (x *stateStreamerAPIGetExecutionDataServer) Send(m *entities.ExecutionData) error {
	return x.ServerStream.SendMsg(m)
}

// StateStreamerAPI_ServiceDesc is the grpc.ServiceDesc for StateStreamerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateStreamerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flow.state_streamer.StateStreamerAPI",
	HandlerType: (*StateStreamerAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlocks",
			Handler:       _StateStreamerAPI_GetBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetExecutionData",
			Handler:       _StateStreamerAPI_GetExecutionData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flow/state_streamer/state_streamer.proto",
}
