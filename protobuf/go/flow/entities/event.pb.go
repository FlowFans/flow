// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flow/entities/event.proto

package entities

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	TransactionId        []byte   `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TransactionIndex     uint32   `protobuf:"varint,3,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	EventIndex           uint32   `protobuf:"varint,4,opt,name=event_index,json=eventIndex,proto3" json:"event_index,omitempty"`
	Payload              []byte   `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb08ee6f360364f, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Event) GetTransactionId() []byte {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *Event) GetTransactionIndex() uint32 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}

func (m *Event) GetEventIndex() uint32 {
	if m != nil {
		return m.EventIndex
	}
	return 0
}

func (m *Event) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type EventInclusionProof struct {
	// standard Sha3 hash of SerializedEventContent
	EventID []byte `protobuf:"bytes,1,opt,name=EventID,proto3" json:"EventID,omitempty"`
	// RLP encoded value of an event data in this order
	//      transaction_id:      transaction identifer (bytes),
	//	    transaction_index:   index of this event based on events emitted in this tx(uint32)
	//		type:                the qualified event type generated by candence runtime (string)
	//		transaction_index:   the index of the transaction within the block (uint32)
	//		payload:             cadence json encoding of the event payload (bytes),
	SerializedEventContent []byte `protobuf:"bytes,2,opt,name=SerializedEventContent,proto3" json:"SerializedEventContent,omitempty"`
	// InterimNodeTypes is supposed to be consumed bit by bit to determine the node types (0: fullnode, 1: shortnode) on the path to the leaf node. canonical form of InterimNodeTypes requires allocating the minimum number of bytes to capture all the nodes on the path and trailing zeros for the bits that are not used.
	InterimNodeTypes [][]byte `protobuf:"bytes,3,rep,name=InterimNodeTypes,proto3" json:"InterimNodeTypes,omitempty"`
	// a series of uint16 values which represents shortNode's count (number of bits of path that are covered by the short node) for each short node on the path.
	ShortPathLengths []uint32 `protobuf:"varint,4,rep,packed,name=ShortPathLengths,proto3" json:"ShortPathLengths,omitempty"`
	// a series of 32-byte hash values which represents the hash of the non-visited sibling node for each full node on the path.
	SiblingHashes        [][]byte `protobuf:"bytes,5,rep,name=SiblingHashes,proto3" json:"SiblingHashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventInclusionProof) Reset()         { *m = EventInclusionProof{} }
func (m *EventInclusionProof) String() string { return proto.CompactTextString(m) }
func (*EventInclusionProof) ProtoMessage()    {}
func (*EventInclusionProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcb08ee6f360364f, []int{1}
}

func (m *EventInclusionProof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventInclusionProof.Unmarshal(m, b)
}
func (m *EventInclusionProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventInclusionProof.Marshal(b, m, deterministic)
}
func (m *EventInclusionProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInclusionProof.Merge(m, src)
}
func (m *EventInclusionProof) XXX_Size() int {
	return xxx_messageInfo_EventInclusionProof.Size(m)
}
func (m *EventInclusionProof) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInclusionProof.DiscardUnknown(m)
}

var xxx_messageInfo_EventInclusionProof proto.InternalMessageInfo

func (m *EventInclusionProof) GetEventID() []byte {
	if m != nil {
		return m.EventID
	}
	return nil
}

func (m *EventInclusionProof) GetSerializedEventContent() []byte {
	if m != nil {
		return m.SerializedEventContent
	}
	return nil
}

func (m *EventInclusionProof) GetInterimNodeTypes() [][]byte {
	if m != nil {
		return m.InterimNodeTypes
	}
	return nil
}

func (m *EventInclusionProof) GetShortPathLengths() []uint32 {
	if m != nil {
		return m.ShortPathLengths
	}
	return nil
}

func (m *EventInclusionProof) GetSiblingHashes() [][]byte {
	if m != nil {
		return m.SiblingHashes
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "flow.entities.Event")
	proto.RegisterType((*EventInclusionProof)(nil), "flow.entities.EventInclusionProof")
}

func init() { proto.RegisterFile("flow/entities/event.proto", fileDescriptor_dcb08ee6f360364f) }

var fileDescriptor_dcb08ee6f360364f = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x4a, 0xeb, 0x40,
	0x10, 0x86, 0xc9, 0x49, 0x7b, 0xc4, 0xb5, 0x91, 0xba, 0x82, 0xac, 0x20, 0x18, 0x8a, 0x42, 0x50,
	0x48, 0x04, 0xc1, 0x07, 0x50, 0x0b, 0x16, 0x44, 0x4a, 0xea, 0x95, 0x37, 0x92, 0x34, 0xd3, 0x64,
	0x21, 0xdd, 0x09, 0xbb, 0x53, 0xb5, 0x3e, 0x92, 0xef, 0xe5, 0x7b, 0x48, 0x36, 0x8d, 0xb4, 0x8a,
	0x37, 0x21, 0xf3, 0xfd, 0x5f, 0xb2, 0x33, 0xcc, 0xb2, 0xc3, 0x59, 0x89, 0xaf, 0x11, 0x28, 0x92,
	0x24, 0xc1, 0x44, 0xf0, 0x02, 0x8a, 0xc2, 0x4a, 0x23, 0x21, 0xf7, 0xea, 0x28, 0x6c, 0xa3, 0xc1,
	0x87, 0xc3, 0xba, 0xc3, 0x3a, 0xe6, 0x9c, 0x75, 0x68, 0x59, 0x81, 0x70, 0x7c, 0x27, 0xd8, 0x8e,
	0xed, 0x3b, 0x3f, 0x65, 0xbb, 0xa4, 0x13, 0x65, 0x92, 0x29, 0x49, 0x54, 0xcf, 0x32, 0x13, 0xff,
	0x7c, 0x27, 0xe8, 0xc5, 0xde, 0x1a, 0x1d, 0x65, 0xfc, 0x9c, 0xed, 0x6d, 0x68, 0x2a, 0x83, 0x37,
	0xe1, 0xfa, 0x4e, 0xe0, 0xc5, 0xfd, 0x75, 0xb3, 0xe6, 0xfc, 0x98, 0xed, 0xd8, 0x7e, 0x56, 0x5a,
	0xc7, 0x6a, 0xcc, 0xa2, 0x46, 0x10, 0x6c, 0xab, 0x4a, 0x96, 0x25, 0x26, 0x99, 0xe8, 0xda, 0xd3,
	0xda, 0x72, 0xf0, 0xe9, 0xb0, 0xfd, 0x61, 0x23, 0x4e, 0xcb, 0x85, 0x91, 0xa8, 0xc6, 0x1a, 0x71,
	0x56, 0x7f, 0xd1, 0xe0, 0x5b, 0xdb, 0x7d, 0x2f, 0x6e, 0x4b, 0x7e, 0xc5, 0x0e, 0x26, 0xa0, 0x65,
	0x52, 0xca, 0x77, 0xc8, 0x2c, 0xbc, 0x41, 0x45, 0xa0, 0x68, 0x35, 0xc8, 0x1f, 0x29, 0x3f, 0x63,
	0xfd, 0x91, 0x22, 0xd0, 0x72, 0xfe, 0x80, 0x19, 0x3c, 0x2e, 0x2b, 0x30, 0xc2, 0xf5, 0xdd, 0xa0,
	0x17, 0xff, 0xe2, 0xb5, 0x3b, 0x29, 0x50, 0xd3, 0x38, 0xa1, 0xe2, 0x1e, 0x54, 0x4e, 0x85, 0x11,
	0x1d, 0xdf, 0xad, 0x87, 0xff, 0xc9, 0xf9, 0x09, 0xf3, 0x26, 0x32, 0x2d, 0xa5, 0xca, 0xef, 0x12,
	0x53, 0x80, 0x11, 0x5d, 0xfb, 0xd3, 0x4d, 0x78, 0x3d, 0x66, 0x47, 0xa8, 0xf3, 0x10, 0x95, 0xdd,
	0x95, 0xdd, 0x5b, 0xba, 0x98, 0x7d, 0x2f, 0xed, 0xe9, 0x22, 0x97, 0x54, 0x2c, 0xd2, 0x70, 0x8a,
	0xf3, 0xa8, 0x91, 0x22, 0xfb, 0x68, 0xcd, 0x28, 0xc7, 0x68, 0xe3, 0x06, 0xa4, 0xff, 0x6d, 0x74,
	0xf9, 0x15, 0x00, 0x00, 0xff, 0xff, 0x73, 0xfa, 0xbc, 0x56, 0x19, 0x02, 0x00, 0x00,
}
